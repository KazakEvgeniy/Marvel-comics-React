{"version":3,"file":"static/js/147.b13db812.chunk.js","mappings":"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","sources":["components/ErrorBoundary/ErrorBoundary.js","components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/charSearchForm.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\n\r\n// обработка ошибок\r\nclass ErrorBoundary extends Component {\r\n\tstate = {\r\n\t\terror: false\r\n\t}\r\n\r\n\tcomponentDidCatch(err, info) {\r\n\t\tconsole.log(err, info);\r\n\t\tthis.setState({\r\n\t\t\terror: true\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.error) {\r\n\t\t\treturn <ErrorMessage />\r\n\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","\r\n// задаём любоое название переменной\r\nimport imgError from './error.gif'\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t// <img src={process.env.PUBLIC_URL + \"/error.gif\"} />\r\n\t\t<img style={{ display: \"block\", width: '250px', height: '250px', margin: '0 auto', objectFit: 'contain' }} src={imgError} alt=\"error\" />\r\n\t)\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n\tconst [char, setChar] = useState(null);\n\tconst { loading, error, getCharacter, clearError } = useMarvelService();\n\n\tuseEffect(() => {\n\t\tupdateChar();\n\t\tconst timerId = setInterval(updateChar, 60000);\n\n\t\treturn () => {\n\t\t\tclearInterval(timerId)\n\t\t}\n\t}, [])\n\n\tconst onCharLoaded = (char) => {\n\t\tsetChar(char);\n\t}\n\n\tconst updateChar = () => {\n\t\tclearError();\n\t\tconst id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n\t\tgetCharacter(id)\n\t\t\t.then(onCharLoaded);\n\t}\n\n\tconst errorMessage = error ? <ErrorMessage /> : null;\n\tconst spinner = loading ? <Spinner /> : null;\n\tconst content = !(loading || error || !char) ? <View char={char} /> : null;\n\n\treturn (\n\t\t<div className=\"randomchar\">\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{content}\n\t\t\t<div className=\"randomchar__static\">\n\t\t\t\t<p className=\"randomchar__title\">\n\t\t\t\t\tRandom character for today!<br />\n\t\t\t\t\tDo you want to get to know him better?\n\t\t\t\t</p>\n\t\t\t\t<p className=\"randomchar__title\">\n\t\t\t\t\tOr choose another one\n\t\t\t\t</p>\n\t\t\t\t<button onClick={updateChar} className=\"button button__main\">\n\t\t\t\t\t<div className=\"inner\">try it</div>\n\t\t\t\t</button>\n\t\t\t\t<img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nconst View = ({ char }) => {\n\n\n\n\tconst { name, description, thumbnail, homepage, wiki } = char;\n\n\n\tlet imgStyle = { 'objectFit': 'cover' };\n\n\tif (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\timgStyle = { 'objectFit': 'contain' };\n\t}\n\n\treturn (\n\t\t<div className=\"randomchar__block\">\n\t\t\t<img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n\t\t\t<div className=\"randomchar__info\">\n\t\t\t\t<p className=\"randomchar__name\">{name}</p>\n\t\t\t\t<p className=\"randomchar__descr\">\n\t\t\t\t\t{description}\n\t\t\t\t</p>\n\t\t\t\t<div className=\"randomchar__btns\">\n\t\t\t\t\t<a href={homepage} className=\"button button__main\">\n\t\t\t\t\t\t<div className=\"inner\">homepage</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n\t// с классовых на функциональные\n\n\t// state = {\n\t// \tcharList: [],\n\t// \tloading: true,\n\t// \terror: false,\n\t// \tnewItemLoading: false,\n\t// \toffset: 210,\n\t// \tcharEnded: false\n\t// }\n\n\n\n\tconst [charList, setCharList] = useState([]);\n\t// const [loading, setLoading] = useState(true);\n\t// const [error, setError] = useState(false);\n\tconst [newItemLoading, setNewItemLoading] = useState(false);\n\tconst [offset, setOffset] = useState(310);\n\tconst [charEnded, setCharEnded] = useState(false);\n\n\n\t// marvelService = new MarvelService();\n\tconst { loading, error, getAllCharacters } = useMarvelService();\n\n\n\n\n\t// componentDidMount() {\n\t// \t// this.marvelService.getAllCharacters()\n\t// \t// \t.then(this.onCharListLoaded)\n\t// \t// \t.catch(this.onError)\n\n\t// \tthis.onRequest();\n\t// }\n\n\n\t// если пустой массив то эта функция выполнится только один раз при создании компонента\n\n\tuseEffect(() => {\n\t\tonRequest(offset, true);\n\t}, [])\n\n\n\t// onRequest = (offset) => {\n\t// \tthis.onCharListLoading();\n\t// \tthis.marvelService.getAllCharacters(offset)\n\t// \t\t.then(this.onCharListLoaded)\n\t// \t\t.catch(this.onError)\n\t// }\n\n\n\n\t// const onRequest = (offset) => {\n\t// \tthis.onCharListLoading();\n\t// \tthis.marvelService.getAllCharacters(offset)\n\t// \t\t.then(this.onCharListLoaded)\n\t// \t\t.catch(this.onError)\n\t// }\n\n\n\tconst onRequest = (offset, initial) => {\n\n\t\tinitial ? setNewItemLoading(false) : setNewItemLoading(true)\n\n\t\tsetNewItemLoading(true);\n\t\tgetAllCharacters(offset)\n\t\t\t.then(onCharListLoaded)\n\t\t// .catch(onError)\n\t}\n\n\n\t// onCharListLoading = () => {\n\t// \tthis.setState({\n\t// \t\tnewItemLoading: true,\n\t// \t})\n\t// }\n\n\n\t// const onCharListLoading = () => {\n\t// \tsetNewItemLoading(true)\n\t// }\n\n\t// onCharListLoaded = (newCharList) => {\n\t// \tlet ended = false;\n\t// \tif (newCharList.length < 9) {\n\t// \t\tended = true\n\t// \t}\n\n\tconst onCharListLoaded = (newCharList) => {\n\n\n\n\t\tlet ended = false;\n\t\tif (newCharList.length < 9) {\n\t\t\tended = true\n\t\t}\n\n\n\t\t// const { logger, second } = await import(\"./someFanc\");\n\t\t// second();\n\t\t// let ended = false;\n\t\t// if (newCharList.length < 9) {\n\t\t// \tended = true\n\t\t// }\n\n\n\n\n\n\t\t// this.setState(({ offset, charList }) => (\n\t\t// \t{\n\t\t// \t\tcharList: [...charList, ...newCharList],\n\t\t// \t\tloading: false,\n\t\t// \t\tnewItemLoading: false,\n\t\t// \t\toffset: offset + 9,\n\t\t// \t\tcharEnded: ended,\n\t\t// \t}\n\t\t// ))\n\n\t\tsetCharList(charList => [...charList, ...newCharList]);\n\t\t// setLoading(loading => false);\n\t\tsetNewItemLoading(newItemLoading => false);\n\t\tsetOffset(offset => offset + 9);\n\t\tsetCharEnded(ended => ended);\n\n\t}\n\n\t// const onError = () => {\n\t// \t// this.setState({\n\t// \t// \terror: true,\n\t// \t// \tloading: false\n\t// \t// })\n\n\t// \tsetError(true);\n\t// \tsetLoading(loading => false);\n\t// }\n\n\t// itemRefs = [];\n\tconst itemRefs = useRef([])\n\n\n\t// удалим и функцию напишем внутри рефа\n\t// setRef = (ref) => {\n\t// \tthis.itemRefs.push(ref);\n\t// }\n\n\t// focusOnItem = (id) => {\n\n\t// \tthis.itemRefs.forEach(item => item.classList.remove('char__item_selected'));\n\t// \tthis.itemRefs[id].classList.add('char__item_selected');\n\t// \tthis.itemRefs[id].focus();\n\t// }\n\n\n\tconst focusOnItem = (id) => {\n\n\t\titemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n\t\titemRefs.current[id].classList.add('char__item_selected');\n\t\titemRefs.current[id].focus();\n\t}\n\n\n\n\n\n\n\n\tfunction renderItems(arr) {\n\n\t\tconst items = arr.map((item, i) => {\n\n\n\t\t\tlet imgStyle = { 'objectFit': 'cover' };\n\t\t\tif (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\t\t\timgStyle = { 'objectFit': 'unset' };\n\t\t\t}\n\n\n\n\n\t\t\treturn (\n\t\t\t\t<li\n\n\t\t\t\t\tclassName=\"char__item\"\n\t\t\t\t\ttabIndex={0}\n\t\t\t\t\tref={el => itemRefs.current[i] = el}\n\t\t\t\t\tkey={item.id}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tprops.onCharSelected(item.id);\n\t\t\t\t\t\tfocusOnItem(i);\n\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tonKeyDown={(e) => {\n\t\t\t\t\t\tif (e.key === ' ' || e.key === \"Enter\") {\n\t\t\t\t\t\t\tprops.onCharSelected(item.id);\n\t\t\t\t\t\t\tfocusOnItem(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\n\t\t\t\t>\n\t\t\t\t\t<img src={item.thumbnail} alt={item.name} style={imgStyle} />\n\t\t\t\t\t<div className=\"char__name\">{item.name}</div>\n\t\t\t\t</li>\n\t\t\t)\n\t\t});\n\n\t\treturn (\n\t\t\t<ul className=\"char__grid\">\n\t\t\t\t{items}\n\t\t\t</ul>\n\t\t)\n\t}\n\n\n\n\t// const { charList, loading, error, newItemLoading, offset, charEnded } = this.state;\n\n\tconst items = renderItems(charList);\n\n\tconst errorMessage = error ? <ErrorMessage /> : null;\n\tconst spinner = loading && !newItemLoading ? <Spinner /> : null;\n\t// const content = !(loading || error) ? items : null;\n\n\n\n\t// Динамический импорт всегда возвращает Promise с объектом модуля\n\n\n\t// if (loading) {\n\t// \timport(\"./someFanc\")\n\t// \t\t.then(obj => obj.logger())\n\t// \t\t.catch()\n\t// }\n\n\n\treturn (\n\t\t<div className=\"char__list\">\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{items}\n\t\t\t<button\n\t\t\t\tclassName=\"button button__main button__long\"\n\t\t\t\tdisabled={newItemLoading}\n\t\t\t\tonClick={() => onRequest(offset)}\n\t\t\t\tstyle={{ \"display\": charEnded ? \"none\" : \"block\" }}\n\t\t\t>\n\t\t\t\t<div className=\"inner\">load more</div>\n\t\t\t</button>\n\t\t</div>\n\t)\n\n}\n\nexport default CharList;","import './skeleton.scss';\n\n// заглушка\nconst Skeleton = () => {\n\treturn (\n\t\t<>\n\t\t\t<p className=\"char__select\">Please select a character to see information</p>\n\t\t\t<div className=\"skeleton\">\n\t\t\t\t<div className=\"pulse skeleton__header\">\n\t\t\t\t\t<div className=\"pulse skeleton__circle\"></div>\n\t\t\t\t\t<div className=\"pulse skeleton__mini\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"pulse skeleton__block\"></div>\n\t\t\t\t<div className=\"pulse skeleton__block\"></div>\n\t\t\t\t<div className=\"pulse skeleton__block\"></div>\n\t\t\t</div>\n\t\t</>\n\t)\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n\tconst [char, setChar] = useState(null);\n\n\tconst { loading, error, getCharacter, clearError } = useMarvelService();\n\n\tuseEffect(() => {\n\t\tupdateChar()\n\t}, [props.charId])\n\n\tconst updateChar = () => {\n\t\tconst { charId } = props;\n\t\tif (!charId) {\n\t\t\treturn;\n\t\t}\n\n\t\tclearError();\n\t\tgetCharacter(charId)\n\t\t\t.then(onCharLoaded)\n\t}\n\n\tconst onCharLoaded = (char) => {\n\t\tsetChar(char);\n\t}\n\n\tconst skeleton = char || loading || error ? null : <Skeleton />;\n\tconst errorMessage = error ? <ErrorMessage /> : null;\n\tconst spinner = loading ? <Spinner /> : null;\n\tconst content = !(loading || error || !char) ? <View char={char} /> : null;\n\n\treturn (\n\t\t<div className=\"char__info\">\n\t\t\t{skeleton}\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{content}\n\t\t</div>\n\t)\n}\n\nconst View = ({ char }) => {\n\tconst { name, description, thumbnail, homepage, wiki, comics } = char;\n\n\t// меняем стиль\n\n\tlet imgStyle = { 'objectFit': 'cover' };\n\tif (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\timgStyle = { 'objectFit': 'contain' };\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"char__basics\">\n\t\t\t\t<img src={thumbnail} alt={name} style={imgStyle} />\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"char__info-name\">{name}</div>\n\t\t\t\t\t<div className=\"char__btns\">\n\t\t\t\t\t\t<a href={homepage} className=\"button button__main\">\n\t\t\t\t\t\t\t<div className=\"inner\">homepage</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n\t\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"char__descr\">\n\t\t\t\t{description}\n\t\t\t</div>\n\t\t\t<div className=\"char__comics\">Comics:</div>\n\t\t\t<ul className=\"char__comics-list\">\n\t\t\t\t{comics.length > 0 ? null : 'There is no comics with this character'}\n\t\t\t\t{\n\t\t\t\t\tcomics.map((item, i) => {\n\n\n\n\t\t\t\t\t\tif (i > 9) return;\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li key={i} className=\"char__comics-item\">\n\t\t\t\t\t\t\t\t{item.name}\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t)\n\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</ul>\n\t\t</>\n\t)\n}\n\n// проверяет т/д props\n\nCharInfo.propTypes = {\n\tcharId: PropTypes.number\n}\n\nexport default CharInfo;","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n\tconst [char, setChar] = useState(null);\r\n\tconst { loading, error, getCharacterByName, clearError } = useMarvelService();\r\n\r\n\tconst onCharLoaded = (char) => {\r\n\t\tsetChar(char);\r\n\t}\r\n\r\n\tconst updateChar = (name) => {\r\n\t\tclearError();\r\n\r\n\t\tgetCharacterByName(name)\r\n\t\t\t.then(onCharLoaded);\r\n\t}\r\n\r\n\tconst errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n\tconst results = !char ? null : char.length > 0 ?\r\n\r\n\r\n\r\n\r\n\t\t<div className=\"char__search-wrapper\">\r\n\t\t\t<div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n\r\n\r\n\t\t\t<Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n\t\t\t\t<div className=\"inner\">To page</div>\r\n\t\t\t</Link>\r\n\r\n\t\t</div> :\r\n\t\t<div className=\"char__search-error\">\r\n\t\t\tThe character was not found. Check the name and try again\r\n\t\t</div>;\r\n\r\n\treturn (\r\n\t\t<div className=\"char__search-form\">\r\n\t\t\t<Formik\r\n\t\t\t\t// валидация yop\r\n\r\n\t\t\t\tinitialValues={{\r\n\t\t\t\t\tcharName: ''\r\n\t\t\t\t}}\r\n\r\n\t\t\t\tvalidationSchema={Yup.object({\r\n\t\t\t\t\tcharName: Yup.string().required('This field is required')\r\n\t\t\t\t})}\r\n\r\n\t\t\t\tonSubmit={({ charName }) => {\r\n\t\t\t\t\tupdateChar(charName);\r\n\t\t\t\t}}\r\n\r\n\r\n\t\t\t>\r\n\t\t\t\t<Form>\r\n\r\n\t\t\t\t\t<label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n\t\t\t\t\t<div className=\"char__search-wrapper\">\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tid=\"charName\"\r\n\t\t\t\t\t\t\tname='charName'\r\n\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\tplaceholder=\"Enter name\" />\r\n\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\ttype='submit'\r\n\t\t\t\t\t\t\tclassName=\"button button__main\"\r\n\t\t\t\t\t\t\tdisabled={loading}>\r\n\t\t\t\t\t\t\t<div className=\"inner\">find</div>\r\n\t\t\t\t\t\t</button>\r\n\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n\r\n\t\t\t\t</Form>\r\n\t\t\t</Formik>\r\n\r\n\r\n\t\t\t{results}\r\n\t\t\t{errorMessage}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CharSearchForm;","import RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../ErrorBoundary/ErrorBoundary\";\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from \"../charSearchForm/charSearchForm\";\r\nimport { useState } from \"react\";\r\n\r\n\r\n\r\n\r\nconst MainPage = () => {\r\n\r\n\tconst [selectedChar, setSelectedChar] = useState(null);\r\n\r\n\tconst onCharSelected = (id) => {\r\n\t\tsetSelectedChar(id)\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t<RandomChar />\r\n\t\t\t</ErrorBoundary>\r\n\t\t\t<div className=\"char__content\">\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CharList onCharSelected={onCharSelected} />\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CharInfo charId={selectedChar} />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CharSearchForm />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t\t<img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default MainPage;","import { useState, useCallback } from \"react\"\r\n\r\n\r\n// собственный хук\r\nexport const useHttp = () => {\r\n\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState(null);\r\n\r\n\tconst request = useCallback(async (url, method = \"GET\", body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n\t\tsetLoading(true);\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, { method, body, headers });\r\n\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n\t\t\t}\r\n\r\n\t\t\tconst data = await response.json();\r\n\r\n\t\t\tsetLoading(false);\r\n\t\t\treturn data;\r\n\r\n\t\t} catch (e) {\r\n\t\t\tsetLoading(false);\r\n\t\t\tsetError(e.message)\r\n\t\t\tthrow e\r\n\t\t}\r\n\r\n\t}, []);\r\n\r\n\r\n\tconst clearError = useCallback(() => setError(null), []);\r\n\r\n\treturn { loading, request, error, clearError }\r\n\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\r\n\tconst { loading, request, error, clearError } = useHttp();\r\n\r\n\tconst _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n\r\n\tconst _apiKey = \"apikey=c5d6fc8b83116d92ed468ce36bac6c62\";\r\n\tconst _baseOffset = 200;\r\n\r\n\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t};\r\n\r\n\r\n\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n\r\n\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n\r\n\r\n\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description\r\n\t\t\t\t? `${char.description.slice(0, 200)}...`\r\n\t\t\t\t: \"There is no description\",\r\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items,\r\n\t\t};\r\n\t};\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\r\n\treturn {\r\n\t\tloading,\r\n\t\terror,\r\n\t\tclearError,\r\n\t\tgetAllCharacters,\r\n\t\tgetCharacter,\r\n\t\tgetCharacterByName,\r\n\t\tgetAllComics,\r\n\t\tgetComic,\r\n\t};\r\n};\r\n\r\nexport default useMarvelService;\r\n"],"names":["ErrorBoundary","Component","constructor","arguments","state","error","componentDidCatch","err","info","console","log","this","setState","render","_jsx","ErrorMessage","props","children","style","display","width","height","margin","objectFit","src","imgError","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","href","RandomChar","setChar","useState","loading","getCharacter","clearError","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","renderItems","disabled","Skeleton","_Fragment","comics","charId","skeleton","CharSearchForm","getCharacterByName","results","Link","to","concat","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","component","MainPage","selectedChar","setSelectedChar","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","message","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic"],"sourceRoot":""}